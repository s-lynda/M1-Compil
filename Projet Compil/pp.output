Terminals unused in grammar

   mc_npf3
   mc_cv2f1
   mc_cv2f2
   mul
   mc_app


Grammar

    0 $accept: S $end

    1 S: List_Dec S
    2  | INST S
    3  | LIB S
    4  | SAUT S
    5  | /* empty */

    6 SAUT: sautdligne SAUT
    7     | sautdligne

    8 LIB: mc_import LIBRARY
    9    | mc_import LIBRARY mc_as idf
   10    | mc_from mc_pil mc_import mc_Img

   11 LIBRARY: mc_numpy
   12        | mc_pil

   13 List_Dec: DEC SAUT

   14 DEC: TYPE idf LIST_VAR
   15    | TAB_DEC

   16 TAB_DEC: TYPE idf croch_O cst_int croch_F

   17 LIST_VAR: vrg idf LIST_VAR
   18         | /* empty */

   19 TYPE: mc_Int
   20     | mc_float
   21     | mc_bool
   22     | mc_char

   23 INST: AFFECT
   24     | IF_ELSE
   25     | WHILE
   26     | FOR_RANGE

   27 AFFECT: AFFECT_ARITHM
   28       | idf mc_aff cst_char SAUT
   29       | idf mc_aff cst_bool SAUT
   30       | AFF_SPECIAL

   31 AFF_SPECIAL: idf mc_aff mc_Img '.' mc_pilf1 PATH SAUT
   32            | idf mc_aff idf '.' mc_npf1 par_O idf par_F PATH par_O SAUT
   33            | idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT
   34            | idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT

   35 PATH: idf
   36     | guillemets idf guillemets

   37 AFFECT_ARITHM: idf mc_aff EXP_ARRITH SAUT

   38 EXP_ARRITH: EXP_ARRITH plus EXP_ARRITH
   39           | EXP_ARRITH division EXP_ARRITH
   40           | minus EXP_ARRITH
   41           | par_O EXP_ARRITH par_O
   42           | idf
   43           | cst_int
   44           | cst_reel

   45 BLOC_INST: tabulation INST BLOC_INST
   46          | tabulation INST

   47 IF_ELSE: B BLOC_INST

   48 B: A BLOC_INST mc_else mc_2p SAUT

   49 A: mc_if par_O COND par_F mc_2p SAUT

   50 COND: EXP_LOGIQUE
   51     | EXP_COMPAR

   52 EXP_COMPAR: EXP_ARRITH egale EXP_ARRITH
   53           | EXP_ARRITH diff EXP_ARRITH
   54           | EXP_ARRITH inf EXP_ARRITH
   55           | EXP_ARRITH infOuEg EXP_ARRITH
   56           | EXP_ARRITH sup EXP_ARRITH
   57           | EXP_ARRITH SupOuEg EXP_ARRITH

   58 EXP_LOGIQUE: par_O EXP_COMPAR par_F OP_LOG par_O EXP_COMPAR par_F

   59 OP_LOG: mc_and
   60       | mc_not
   61       | mc_OR

   62 WHILE: BB BLOC_INST

   63 BB: AA COND par_F mc_2p SAUT

   64 AA: mc_while par_O

   65 FOR_RANGE: CCC par_F mc_2p SAUT BLOC_INST

   66 CCC: BBB vrg EXP_ARRITH

   67 BBB: AAA mc_in mc_range par_O EXP_ARRITH
   68    | AAA mc_in par_O EXP_ARRITH

   69 AAA: mc_for idf


Terminals, with rules where they appear

$end (0) 0
'.' (46) 31 32 33 34
error (256)
mc_import (258) 8 9 10
mc_as (259) 9
mc_numpy (260) 11
mc_pil (261) 10 12
mc_Img (262) 10 31
mc_npf1 (263) 32
mc_npf3 (264)
mc_pilf3 (265) 33 34
mc_pilf2 (266) 34
mc_pilf1 (267) 31 33 34
mc_cv2f1 (268)
mc_cv2f2 (269)
mc_from (270) 10
mc_range (271) 67
mc_in (272) 67 68
idf (273) 9 14 16 17 28 29 31 32 33 34 35 36 37 42 69
cst_int (274) 16 43
cst_reel (275) 44
cst_char (276) 28
cst_bool (277) 29
mc_Int (278) 19
mc_float (279) 20
mc_bool (280) 21
mc_char (281) 22
mc_aff (282) 28 29 31 32 33 34 37
plus (283) 38
minus (284) 40
mul (285)
division (286) 39
mc_and (287) 59
mc_OR (288) 61
mc_not (289) 60
sup (290) 56
inf (291) 54
infOuEg (292) 55
SupOuEg (293) 57
diff (294) 53
egale (295) 52
mc_app (296)
par_O (297) 32 33 34 41 49 58 64 67 68
par_F (298) 32 33 34 49 58 63 65
mc_if (299) 49
mc_else (300) 48
mc_for (301) 69
vrg (302) 17 66
mc_2p (303) 48 49 63 65
mc_while (304) 64
croch_O (305) 16
croch_F (306) 16
tabulation (307) 45 46
guillemets (308) 36
sautdligne (309) 6 7


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
S (57)
    on left: 1 2 3 4 5, on right: 0 1 2 3 4
SAUT (58)
    on left: 6 7, on right: 4 6 13 28 29 31 32 33 34 37 48 49 63 65
LIB (59)
    on left: 8 9 10, on right: 3
LIBRARY (60)
    on left: 11 12, on right: 8 9
List_Dec (61)
    on left: 13, on right: 1
DEC (62)
    on left: 14 15, on right: 13
TAB_DEC (63)
    on left: 16, on right: 15
LIST_VAR (64)
    on left: 17 18, on right: 14 17
TYPE (65)
    on left: 19 20 21 22, on right: 14 16
INST (66)
    on left: 23 24 25 26, on right: 2 45 46
AFFECT (67)
    on left: 27 28 29 30, on right: 23
AFF_SPECIAL (68)
    on left: 31 32 33 34, on right: 30
PATH (69)
    on left: 35 36, on right: 31 32 33 34
AFFECT_ARITHM (70)
    on left: 37, on right: 27
EXP_ARRITH (71)
    on left: 38 39 40 41 42 43 44, on right: 37 38 39 40 41 52 53 54
    55 56 57 66 67 68
BLOC_INST (72)
    on left: 45 46, on right: 45 47 48 62 65
IF_ELSE (73)
    on left: 47, on right: 24
B (74)
    on left: 48, on right: 47
A (75)
    on left: 49, on right: 48
COND (76)
    on left: 50 51, on right: 49 63
EXP_COMPAR (77)
    on left: 52 53 54 55 56 57, on right: 51 58
EXP_LOGIQUE (78)
    on left: 58, on right: 50
OP_LOG (79)
    on left: 59 60 61, on right: 58
WHILE (80)
    on left: 62, on right: 25
BB (81)
    on left: 63, on right: 62
AA (82)
    on left: 64, on right: 63
FOR_RANGE (83)
    on left: 65, on right: 26
CCC (84)
    on left: 66, on right: 65
BBB (85)
    on left: 67 68, on right: 66
AAA (86)
    on left: 69, on right: 67 68


state 0

    0 $accept: . S $end

    mc_import   shift, and go to state 1
    mc_from     shift, and go to state 2
    idf         shift, and go to state 3
    mc_Int      shift, and go to state 4
    mc_float    shift, and go to state 5
    mc_bool     shift, and go to state 6
    mc_char     shift, and go to state 7
    mc_if       shift, and go to state 8
    mc_for      shift, and go to state 9
    mc_while    shift, and go to state 10
    sautdligne  shift, and go to state 11

    $default  reduce using rule 5 (S)

    S              go to state 12
    SAUT           go to state 13
    LIB            go to state 14
    List_Dec       go to state 15
    DEC            go to state 16
    TAB_DEC        go to state 17
    TYPE           go to state 18
    INST           go to state 19
    AFFECT         go to state 20
    AFF_SPECIAL    go to state 21
    AFFECT_ARITHM  go to state 22
    IF_ELSE        go to state 23
    B              go to state 24
    A              go to state 25
    WHILE          go to state 26
    BB             go to state 27
    AA             go to state 28
    FOR_RANGE      go to state 29
    CCC            go to state 30
    BBB            go to state 31
    AAA            go to state 32


state 1

    8 LIB: mc_import . LIBRARY
    9    | mc_import . LIBRARY mc_as idf

    mc_numpy  shift, and go to state 33
    mc_pil    shift, and go to state 34

    LIBRARY  go to state 35


state 2

   10 LIB: mc_from . mc_pil mc_import mc_Img

    mc_pil  shift, and go to state 36


state 3

   28 AFFECT: idf . mc_aff cst_char SAUT
   29       | idf . mc_aff cst_bool SAUT
   31 AFF_SPECIAL: idf . mc_aff mc_Img '.' mc_pilf1 PATH SAUT
   32            | idf . mc_aff idf '.' mc_npf1 par_O idf par_F PATH par_O SAUT
   33            | idf . mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT
   34            | idf . mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT
   37 AFFECT_ARITHM: idf . mc_aff EXP_ARRITH SAUT

    mc_aff  shift, and go to state 37


state 4

   19 TYPE: mc_Int .

    $default  reduce using rule 19 (TYPE)


state 5

   20 TYPE: mc_float .

    $default  reduce using rule 20 (TYPE)


state 6

   21 TYPE: mc_bool .

    $default  reduce using rule 21 (TYPE)


state 7

   22 TYPE: mc_char .

    $default  reduce using rule 22 (TYPE)


state 8

   49 A: mc_if . par_O COND par_F mc_2p SAUT

    par_O  shift, and go to state 38


state 9

   69 AAA: mc_for . idf

    idf  shift, and go to state 39


state 10

   64 AA: mc_while . par_O

    par_O  shift, and go to state 40


state 11

    6 SAUT: sautdligne . SAUT
    7     | sautdligne .

    sautdligne  shift, and go to state 11

    $default  reduce using rule 7 (SAUT)

    SAUT  go to state 41


state 12

    0 $accept: S . $end

    $end  shift, and go to state 42


state 13

    4 S: SAUT . S

    mc_import   shift, and go to state 1
    mc_from     shift, and go to state 2
    idf         shift, and go to state 3
    mc_Int      shift, and go to state 4
    mc_float    shift, and go to state 5
    mc_bool     shift, and go to state 6
    mc_char     shift, and go to state 7
    mc_if       shift, and go to state 8
    mc_for      shift, and go to state 9
    mc_while    shift, and go to state 10
    sautdligne  shift, and go to state 11

    $default  reduce using rule 5 (S)

    S              go to state 43
    SAUT           go to state 13
    LIB            go to state 14
    List_Dec       go to state 15
    DEC            go to state 16
    TAB_DEC        go to state 17
    TYPE           go to state 18
    INST           go to state 19
    AFFECT         go to state 20
    AFF_SPECIAL    go to state 21
    AFFECT_ARITHM  go to state 22
    IF_ELSE        go to state 23
    B              go to state 24
    A              go to state 25
    WHILE          go to state 26
    BB             go to state 27
    AA             go to state 28
    FOR_RANGE      go to state 29
    CCC            go to state 30
    BBB            go to state 31
    AAA            go to state 32


state 14

    3 S: LIB . S

    mc_import   shift, and go to state 1
    mc_from     shift, and go to state 2
    idf         shift, and go to state 3
    mc_Int      shift, and go to state 4
    mc_float    shift, and go to state 5
    mc_bool     shift, and go to state 6
    mc_char     shift, and go to state 7
    mc_if       shift, and go to state 8
    mc_for      shift, and go to state 9
    mc_while    shift, and go to state 10
    sautdligne  shift, and go to state 11

    $default  reduce using rule 5 (S)

    S              go to state 44
    SAUT           go to state 13
    LIB            go to state 14
    List_Dec       go to state 15
    DEC            go to state 16
    TAB_DEC        go to state 17
    TYPE           go to state 18
    INST           go to state 19
    AFFECT         go to state 20
    AFF_SPECIAL    go to state 21
    AFFECT_ARITHM  go to state 22
    IF_ELSE        go to state 23
    B              go to state 24
    A              go to state 25
    WHILE          go to state 26
    BB             go to state 27
    AA             go to state 28
    FOR_RANGE      go to state 29
    CCC            go to state 30
    BBB            go to state 31
    AAA            go to state 32


state 15

    1 S: List_Dec . S

    mc_import   shift, and go to state 1
    mc_from     shift, and go to state 2
    idf         shift, and go to state 3
    mc_Int      shift, and go to state 4
    mc_float    shift, and go to state 5
    mc_bool     shift, and go to state 6
    mc_char     shift, and go to state 7
    mc_if       shift, and go to state 8
    mc_for      shift, and go to state 9
    mc_while    shift, and go to state 10
    sautdligne  shift, and go to state 11

    $default  reduce using rule 5 (S)

    S              go to state 45
    SAUT           go to state 13
    LIB            go to state 14
    List_Dec       go to state 15
    DEC            go to state 16
    TAB_DEC        go to state 17
    TYPE           go to state 18
    INST           go to state 19
    AFFECT         go to state 20
    AFF_SPECIAL    go to state 21
    AFFECT_ARITHM  go to state 22
    IF_ELSE        go to state 23
    B              go to state 24
    A              go to state 25
    WHILE          go to state 26
    BB             go to state 27
    AA             go to state 28
    FOR_RANGE      go to state 29
    CCC            go to state 30
    BBB            go to state 31
    AAA            go to state 32


state 16

   13 List_Dec: DEC . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 46


state 17

   15 DEC: TAB_DEC .

    $default  reduce using rule 15 (DEC)


state 18

   14 DEC: TYPE . idf LIST_VAR
   16 TAB_DEC: TYPE . idf croch_O cst_int croch_F

    idf  shift, and go to state 47


state 19

    2 S: INST . S

    mc_import   shift, and go to state 1
    mc_from     shift, and go to state 2
    idf         shift, and go to state 3
    mc_Int      shift, and go to state 4
    mc_float    shift, and go to state 5
    mc_bool     shift, and go to state 6
    mc_char     shift, and go to state 7
    mc_if       shift, and go to state 8
    mc_for      shift, and go to state 9
    mc_while    shift, and go to state 10
    sautdligne  shift, and go to state 11

    $default  reduce using rule 5 (S)

    S              go to state 48
    SAUT           go to state 13
    LIB            go to state 14
    List_Dec       go to state 15
    DEC            go to state 16
    TAB_DEC        go to state 17
    TYPE           go to state 18
    INST           go to state 19
    AFFECT         go to state 20
    AFF_SPECIAL    go to state 21
    AFFECT_ARITHM  go to state 22
    IF_ELSE        go to state 23
    B              go to state 24
    A              go to state 25
    WHILE          go to state 26
    BB             go to state 27
    AA             go to state 28
    FOR_RANGE      go to state 29
    CCC            go to state 30
    BBB            go to state 31
    AAA            go to state 32


state 20

   23 INST: AFFECT .

    $default  reduce using rule 23 (INST)


state 21

   30 AFFECT: AFF_SPECIAL .

    $default  reduce using rule 30 (AFFECT)


state 22

   27 AFFECT: AFFECT_ARITHM .

    $default  reduce using rule 27 (AFFECT)


state 23

   24 INST: IF_ELSE .

    $default  reduce using rule 24 (INST)


state 24

   47 IF_ELSE: B . BLOC_INST

    tabulation  shift, and go to state 49

    BLOC_INST  go to state 50


state 25

   48 B: A . BLOC_INST mc_else mc_2p SAUT

    tabulation  shift, and go to state 49

    BLOC_INST  go to state 51


state 26

   25 INST: WHILE .

    $default  reduce using rule 25 (INST)


state 27

   62 WHILE: BB . BLOC_INST

    tabulation  shift, and go to state 49

    BLOC_INST  go to state 52


state 28

   63 BB: AA . COND par_F mc_2p SAUT

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 57

    EXP_ARRITH   go to state 58
    COND         go to state 59
    EXP_COMPAR   go to state 60
    EXP_LOGIQUE  go to state 61


state 29

   26 INST: FOR_RANGE .

    $default  reduce using rule 26 (INST)


state 30

   65 FOR_RANGE: CCC . par_F mc_2p SAUT BLOC_INST

    par_F  shift, and go to state 62


state 31

   66 CCC: BBB . vrg EXP_ARRITH

    vrg  shift, and go to state 63


state 32

   67 BBB: AAA . mc_in mc_range par_O EXP_ARRITH
   68    | AAA . mc_in par_O EXP_ARRITH

    mc_in  shift, and go to state 64


state 33

   11 LIBRARY: mc_numpy .

    $default  reduce using rule 11 (LIBRARY)


state 34

   12 LIBRARY: mc_pil .

    $default  reduce using rule 12 (LIBRARY)


state 35

    8 LIB: mc_import LIBRARY .
    9    | mc_import LIBRARY . mc_as idf

    mc_as  shift, and go to state 65

    $default  reduce using rule 8 (LIB)


state 36

   10 LIB: mc_from mc_pil . mc_import mc_Img

    mc_import  shift, and go to state 66


state 37

   28 AFFECT: idf mc_aff . cst_char SAUT
   29       | idf mc_aff . cst_bool SAUT
   31 AFF_SPECIAL: idf mc_aff . mc_Img '.' mc_pilf1 PATH SAUT
   32            | idf mc_aff . idf '.' mc_npf1 par_O idf par_F PATH par_O SAUT
   33            | idf mc_aff . mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT
   34            | idf mc_aff . mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT
   37 AFFECT_ARITHM: idf mc_aff . EXP_ARRITH SAUT

    mc_Img    shift, and go to state 67
    mc_pilf1  shift, and go to state 68
    idf       shift, and go to state 69
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    cst_char  shift, and go to state 70
    cst_bool  shift, and go to state 71
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 73


state 38

   49 A: mc_if par_O . COND par_F mc_2p SAUT

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 57

    EXP_ARRITH   go to state 58
    COND         go to state 74
    EXP_COMPAR   go to state 60
    EXP_LOGIQUE  go to state 61


state 39

   69 AAA: mc_for idf .

    $default  reduce using rule 69 (AAA)


state 40

   64 AA: mc_while par_O .

    $default  reduce using rule 64 (AA)


state 41

    6 SAUT: sautdligne SAUT .

    $default  reduce using rule 6 (SAUT)


state 42

    0 $accept: S $end .

    $default  accept


state 43

    4 S: SAUT S .

    $default  reduce using rule 4 (S)


state 44

    3 S: LIB S .

    $default  reduce using rule 3 (S)


state 45

    1 S: List_Dec S .

    $default  reduce using rule 1 (S)


state 46

   13 List_Dec: DEC SAUT .

    $default  reduce using rule 13 (List_Dec)


state 47

   14 DEC: TYPE idf . LIST_VAR
   16 TAB_DEC: TYPE idf . croch_O cst_int croch_F

    vrg      shift, and go to state 75
    croch_O  shift, and go to state 76

    $default  reduce using rule 18 (LIST_VAR)

    LIST_VAR  go to state 77


state 48

    2 S: INST S .

    $default  reduce using rule 2 (S)


state 49

   45 BLOC_INST: tabulation . INST BLOC_INST
   46          | tabulation . INST

    idf       shift, and go to state 3
    mc_if     shift, and go to state 8
    mc_for    shift, and go to state 9
    mc_while  shift, and go to state 10

    INST           go to state 78
    AFFECT         go to state 20
    AFF_SPECIAL    go to state 21
    AFFECT_ARITHM  go to state 22
    IF_ELSE        go to state 23
    B              go to state 24
    A              go to state 25
    WHILE          go to state 26
    BB             go to state 27
    AA             go to state 28
    FOR_RANGE      go to state 29
    CCC            go to state 30
    BBB            go to state 31
    AAA            go to state 32


state 50

   47 IF_ELSE: B BLOC_INST .

    $default  reduce using rule 47 (IF_ELSE)


state 51

   48 B: A BLOC_INST . mc_else mc_2p SAUT

    mc_else  shift, and go to state 79


state 52

   62 WHILE: BB BLOC_INST .

    $default  reduce using rule 62 (WHILE)


state 53

   42 EXP_ARRITH: idf .

    $default  reduce using rule 42 (EXP_ARRITH)


state 54

   43 EXP_ARRITH: cst_int .

    $default  reduce using rule 43 (EXP_ARRITH)


state 55

   44 EXP_ARRITH: cst_reel .

    $default  reduce using rule 44 (EXP_ARRITH)


state 56

   40 EXP_ARRITH: minus . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 80


state 57

   41 EXP_ARRITH: par_O . EXP_ARRITH par_O
   58 EXP_LOGIQUE: par_O . EXP_COMPAR par_F OP_LOG par_O EXP_COMPAR par_F

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 81
    EXP_COMPAR  go to state 82


state 58

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   52 EXP_COMPAR: EXP_ARRITH . egale EXP_ARRITH
   53           | EXP_ARRITH . diff EXP_ARRITH
   54           | EXP_ARRITH . inf EXP_ARRITH
   55           | EXP_ARRITH . infOuEg EXP_ARRITH
   56           | EXP_ARRITH . sup EXP_ARRITH
   57           | EXP_ARRITH . SupOuEg EXP_ARRITH

    plus      shift, and go to state 83
    division  shift, and go to state 84
    sup       shift, and go to state 85
    inf       shift, and go to state 86
    infOuEg   shift, and go to state 87
    SupOuEg   shift, and go to state 88
    diff      shift, and go to state 89
    egale     shift, and go to state 90


state 59

   63 BB: AA COND . par_F mc_2p SAUT

    par_F  shift, and go to state 91


state 60

   51 COND: EXP_COMPAR .

    $default  reduce using rule 51 (COND)


state 61

   50 COND: EXP_LOGIQUE .

    $default  reduce using rule 50 (COND)


state 62

   65 FOR_RANGE: CCC par_F . mc_2p SAUT BLOC_INST

    mc_2p  shift, and go to state 92


state 63

   66 CCC: BBB vrg . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 93


state 64

   67 BBB: AAA mc_in . mc_range par_O EXP_ARRITH
   68    | AAA mc_in . par_O EXP_ARRITH

    mc_range  shift, and go to state 94
    par_O     shift, and go to state 95


state 65

    9 LIB: mc_import LIBRARY mc_as . idf

    idf  shift, and go to state 96


state 66

   10 LIB: mc_from mc_pil mc_import . mc_Img

    mc_Img  shift, and go to state 97


state 67

   31 AFF_SPECIAL: idf mc_aff mc_Img . '.' mc_pilf1 PATH SAUT

    '.'  shift, and go to state 98


state 68

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 . '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT
   34            | idf mc_aff mc_pilf1 . '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT

    '.'  shift, and go to state 99


state 69

   32 AFF_SPECIAL: idf mc_aff idf . '.' mc_npf1 par_O idf par_F PATH par_O SAUT
   42 EXP_ARRITH: idf .

    '.'  shift, and go to state 100

    $default  reduce using rule 42 (EXP_ARRITH)


state 70

   28 AFFECT: idf mc_aff cst_char . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 101


state 71

   29 AFFECT: idf mc_aff cst_bool . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 102


state 72

   41 EXP_ARRITH: par_O . EXP_ARRITH par_O

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 103


state 73

   37 AFFECT_ARITHM: idf mc_aff EXP_ARRITH . SAUT
   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH

    plus        shift, and go to state 83
    division    shift, and go to state 84
    sautdligne  shift, and go to state 11

    SAUT  go to state 104


state 74

   49 A: mc_if par_O COND . par_F mc_2p SAUT

    par_F  shift, and go to state 105


state 75

   17 LIST_VAR: vrg . idf LIST_VAR

    idf  shift, and go to state 106


state 76

   16 TAB_DEC: TYPE idf croch_O . cst_int croch_F

    cst_int  shift, and go to state 107


state 77

   14 DEC: TYPE idf LIST_VAR .

    $default  reduce using rule 14 (DEC)


state 78

   45 BLOC_INST: tabulation INST . BLOC_INST
   46          | tabulation INST .

    tabulation  shift, and go to state 49

    $default  reduce using rule 46 (BLOC_INST)

    BLOC_INST  go to state 108


state 79

   48 B: A BLOC_INST mc_else . mc_2p SAUT

    mc_2p  shift, and go to state 109


state 80

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   40           | minus EXP_ARRITH .

    division  shift, and go to state 84

    $default  reduce using rule 40 (EXP_ARRITH)


state 81

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   41           | par_O EXP_ARRITH . par_O
   52 EXP_COMPAR: EXP_ARRITH . egale EXP_ARRITH
   53           | EXP_ARRITH . diff EXP_ARRITH
   54           | EXP_ARRITH . inf EXP_ARRITH
   55           | EXP_ARRITH . infOuEg EXP_ARRITH
   56           | EXP_ARRITH . sup EXP_ARRITH
   57           | EXP_ARRITH . SupOuEg EXP_ARRITH

    plus      shift, and go to state 83
    division  shift, and go to state 84
    sup       shift, and go to state 85
    inf       shift, and go to state 86
    infOuEg   shift, and go to state 87
    SupOuEg   shift, and go to state 88
    diff      shift, and go to state 89
    egale     shift, and go to state 90
    par_O     shift, and go to state 110


state 82

   58 EXP_LOGIQUE: par_O EXP_COMPAR . par_F OP_LOG par_O EXP_COMPAR par_F

    par_F  shift, and go to state 111


state 83

   38 EXP_ARRITH: EXP_ARRITH plus . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 112


state 84

   39 EXP_ARRITH: EXP_ARRITH division . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 113


state 85

   56 EXP_COMPAR: EXP_ARRITH sup . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 114


state 86

   54 EXP_COMPAR: EXP_ARRITH inf . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 115


state 87

   55 EXP_COMPAR: EXP_ARRITH infOuEg . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 116


state 88

   57 EXP_COMPAR: EXP_ARRITH SupOuEg . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 117


state 89

   53 EXP_COMPAR: EXP_ARRITH diff . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 118


state 90

   52 EXP_COMPAR: EXP_ARRITH egale . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 119


state 91

   63 BB: AA COND par_F . mc_2p SAUT

    mc_2p  shift, and go to state 120


state 92

   65 FOR_RANGE: CCC par_F mc_2p . SAUT BLOC_INST

    sautdligne  shift, and go to state 11

    SAUT  go to state 121


state 93

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   66 CCC: BBB vrg EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 66 (CCC)


state 94

   67 BBB: AAA mc_in mc_range . par_O EXP_ARRITH

    par_O  shift, and go to state 122


state 95

   68 BBB: AAA mc_in par_O . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 123


state 96

    9 LIB: mc_import LIBRARY mc_as idf .

    $default  reduce using rule 9 (LIB)


state 97

   10 LIB: mc_from mc_pil mc_import mc_Img .

    $default  reduce using rule 10 (LIB)


state 98

   31 AFF_SPECIAL: idf mc_aff mc_Img '.' . mc_pilf1 PATH SAUT

    mc_pilf1  shift, and go to state 124


state 99

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' . mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT
   34            | idf mc_aff mc_pilf1 '.' . mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT

    mc_pilf2  shift, and go to state 125
    mc_pilf1  shift, and go to state 126


state 100

   32 AFF_SPECIAL: idf mc_aff idf '.' . mc_npf1 par_O idf par_F PATH par_O SAUT

    mc_npf1  shift, and go to state 127


state 101

   28 AFFECT: idf mc_aff cst_char SAUT .

    $default  reduce using rule 28 (AFFECT)


state 102

   29 AFFECT: idf mc_aff cst_bool SAUT .

    $default  reduce using rule 29 (AFFECT)


state 103

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   41           | par_O EXP_ARRITH . par_O

    plus      shift, and go to state 83
    division  shift, and go to state 84
    par_O     shift, and go to state 110


state 104

   37 AFFECT_ARITHM: idf mc_aff EXP_ARRITH SAUT .

    $default  reduce using rule 37 (AFFECT_ARITHM)


state 105

   49 A: mc_if par_O COND par_F . mc_2p SAUT

    mc_2p  shift, and go to state 128


state 106

   17 LIST_VAR: vrg idf . LIST_VAR

    vrg  shift, and go to state 75

    $default  reduce using rule 18 (LIST_VAR)

    LIST_VAR  go to state 129


state 107

   16 TAB_DEC: TYPE idf croch_O cst_int . croch_F

    croch_F  shift, and go to state 130


state 108

   45 BLOC_INST: tabulation INST BLOC_INST .

    $default  reduce using rule 45 (BLOC_INST)


state 109

   48 B: A BLOC_INST mc_else mc_2p . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 131


state 110

   41 EXP_ARRITH: par_O EXP_ARRITH par_O .

    $default  reduce using rule 41 (EXP_ARRITH)


state 111

   58 EXP_LOGIQUE: par_O EXP_COMPAR par_F . OP_LOG par_O EXP_COMPAR par_F

    mc_and  shift, and go to state 132
    mc_OR   shift, and go to state 133
    mc_not  shift, and go to state 134

    OP_LOG  go to state 135


state 112

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   38           | EXP_ARRITH plus EXP_ARRITH .
   39           | EXP_ARRITH . division EXP_ARRITH

    division  shift, and go to state 84

    $default  reduce using rule 38 (EXP_ARRITH)


state 113

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   39           | EXP_ARRITH division EXP_ARRITH .

    $default  reduce using rule 39 (EXP_ARRITH)


state 114

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   56 EXP_COMPAR: EXP_ARRITH sup EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 56 (EXP_COMPAR)


state 115

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   54 EXP_COMPAR: EXP_ARRITH inf EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 54 (EXP_COMPAR)


state 116

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   55 EXP_COMPAR: EXP_ARRITH infOuEg EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 55 (EXP_COMPAR)


state 117

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   57 EXP_COMPAR: EXP_ARRITH SupOuEg EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 57 (EXP_COMPAR)


state 118

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   53 EXP_COMPAR: EXP_ARRITH diff EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 53 (EXP_COMPAR)


state 119

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   52 EXP_COMPAR: EXP_ARRITH egale EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 52 (EXP_COMPAR)


state 120

   63 BB: AA COND par_F mc_2p . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 136


state 121

   65 FOR_RANGE: CCC par_F mc_2p SAUT . BLOC_INST

    tabulation  shift, and go to state 49

    BLOC_INST  go to state 137


state 122

   67 BBB: AAA mc_in mc_range par_O . EXP_ARRITH

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 138


state 123

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   68 BBB: AAA mc_in par_O EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 68 (BBB)


state 124

   31 AFF_SPECIAL: idf mc_aff mc_Img '.' mc_pilf1 . PATH SAUT

    idf         shift, and go to state 139
    guillemets  shift, and go to state 140

    PATH  go to state 141


state 125

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 . par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT

    par_O  shift, and go to state 142


state 126

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 . par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT

    par_O  shift, and go to state 143


state 127

   32 AFF_SPECIAL: idf mc_aff idf '.' mc_npf1 . par_O idf par_F PATH par_O SAUT

    par_O  shift, and go to state 144


state 128

   49 A: mc_if par_O COND par_F mc_2p . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 145


state 129

   17 LIST_VAR: vrg idf LIST_VAR .

    $default  reduce using rule 17 (LIST_VAR)


state 130

   16 TAB_DEC: TYPE idf croch_O cst_int croch_F .

    $default  reduce using rule 16 (TAB_DEC)


state 131

   48 B: A BLOC_INST mc_else mc_2p SAUT .

    $default  reduce using rule 48 (B)


state 132

   59 OP_LOG: mc_and .

    $default  reduce using rule 59 (OP_LOG)


state 133

   61 OP_LOG: mc_OR .

    $default  reduce using rule 61 (OP_LOG)


state 134

   60 OP_LOG: mc_not .

    $default  reduce using rule 60 (OP_LOG)


state 135

   58 EXP_LOGIQUE: par_O EXP_COMPAR par_F OP_LOG . par_O EXP_COMPAR par_F

    par_O  shift, and go to state 146


state 136

   63 BB: AA COND par_F mc_2p SAUT .

    $default  reduce using rule 63 (BB)


state 137

   65 FOR_RANGE: CCC par_F mc_2p SAUT BLOC_INST .

    $default  reduce using rule 65 (FOR_RANGE)


state 138

   38 EXP_ARRITH: EXP_ARRITH . plus EXP_ARRITH
   39           | EXP_ARRITH . division EXP_ARRITH
   67 BBB: AAA mc_in mc_range par_O EXP_ARRITH .

    plus      shift, and go to state 83
    division  shift, and go to state 84

    $default  reduce using rule 67 (BBB)


state 139

   35 PATH: idf .

    $default  reduce using rule 35 (PATH)


state 140

   36 PATH: guillemets . idf guillemets

    idf  shift, and go to state 147


state 141

   31 AFF_SPECIAL: idf mc_aff mc_Img '.' mc_pilf1 PATH . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 148


state 142

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O . idf par_F '.' mc_pilf3 par_O PATH par_F SAUT

    idf  shift, and go to state 149


state 143

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O . idf par_F '.' mc_pilf3 par_O PATH par_F SAUT

    idf  shift, and go to state 150


state 144

   32 AFF_SPECIAL: idf mc_aff idf '.' mc_npf1 par_O . idf par_F PATH par_O SAUT

    idf  shift, and go to state 151


state 145

   49 A: mc_if par_O COND par_F mc_2p SAUT .

    $default  reduce using rule 49 (A)


state 146

   58 EXP_LOGIQUE: par_O EXP_COMPAR par_F OP_LOG par_O . EXP_COMPAR par_F

    idf       shift, and go to state 53
    cst_int   shift, and go to state 54
    cst_reel  shift, and go to state 55
    minus     shift, and go to state 56
    par_O     shift, and go to state 72

    EXP_ARRITH  go to state 58
    EXP_COMPAR  go to state 152


state 147

   36 PATH: guillemets idf . guillemets

    guillemets  shift, and go to state 153


state 148

   31 AFF_SPECIAL: idf mc_aff mc_Img '.' mc_pilf1 PATH SAUT .

    $default  reduce using rule 31 (AFF_SPECIAL)


state 149

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf . par_F '.' mc_pilf3 par_O PATH par_F SAUT

    par_F  shift, and go to state 154


state 150

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf . par_F '.' mc_pilf3 par_O PATH par_F SAUT

    par_F  shift, and go to state 155


state 151

   32 AFF_SPECIAL: idf mc_aff idf '.' mc_npf1 par_O idf . par_F PATH par_O SAUT

    par_F  shift, and go to state 156


state 152

   58 EXP_LOGIQUE: par_O EXP_COMPAR par_F OP_LOG par_O EXP_COMPAR . par_F

    par_F  shift, and go to state 157


state 153

   36 PATH: guillemets idf guillemets .

    $default  reduce using rule 36 (PATH)


state 154

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F . '.' mc_pilf3 par_O PATH par_F SAUT

    '.'  shift, and go to state 158


state 155

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F . '.' mc_pilf3 par_O PATH par_F SAUT

    '.'  shift, and go to state 159


state 156

   32 AFF_SPECIAL: idf mc_aff idf '.' mc_npf1 par_O idf par_F . PATH par_O SAUT

    idf         shift, and go to state 139
    guillemets  shift, and go to state 140

    PATH  go to state 160


state 157

   58 EXP_LOGIQUE: par_O EXP_COMPAR par_F OP_LOG par_O EXP_COMPAR par_F .

    $default  reduce using rule 58 (EXP_LOGIQUE)


state 158

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' . mc_pilf3 par_O PATH par_F SAUT

    mc_pilf3  shift, and go to state 161


state 159

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' . mc_pilf3 par_O PATH par_F SAUT

    mc_pilf3  shift, and go to state 162


state 160

   32 AFF_SPECIAL: idf mc_aff idf '.' mc_npf1 par_O idf par_F PATH . par_O SAUT

    par_O  shift, and go to state 163


state 161

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 . par_O PATH par_F SAUT

    par_O  shift, and go to state 164


state 162

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 . par_O PATH par_F SAUT

    par_O  shift, and go to state 165


state 163

   32 AFF_SPECIAL: idf mc_aff idf '.' mc_npf1 par_O idf par_F PATH par_O . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 166


state 164

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O . PATH par_F SAUT

    idf         shift, and go to state 139
    guillemets  shift, and go to state 140

    PATH  go to state 167


state 165

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O . PATH par_F SAUT

    idf         shift, and go to state 139
    guillemets  shift, and go to state 140

    PATH  go to state 168


state 166

   32 AFF_SPECIAL: idf mc_aff idf '.' mc_npf1 par_O idf par_F PATH par_O SAUT .

    $default  reduce using rule 32 (AFF_SPECIAL)


state 167

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH . par_F SAUT

    par_F  shift, and go to state 169


state 168

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH . par_F SAUT

    par_F  shift, and go to state 170


state 169

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH par_F . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 171


state 170

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH par_F . SAUT

    sautdligne  shift, and go to state 11

    SAUT  go to state 172


state 171

   34 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf2 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT .

    $default  reduce using rule 34 (AFF_SPECIAL)


state 172

   33 AFF_SPECIAL: idf mc_aff mc_pilf1 '.' mc_pilf1 par_O idf par_F '.' mc_pilf3 par_O PATH par_F SAUT .

    $default  reduce using rule 33 (AFF_SPECIAL)
